package ru.borbotko.football.gui.dialog;

import com.github.lgooddatepicker.components.DateTimePicker;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import java.awt.Dimension;
import java.awt.Insets;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import org.springframework.util.StringUtils;
import ru.borbotko.football.entity.Match;
import ru.borbotko.football.exception.InvalidFieldException;

/** Диалог для позиций. */
public class MatchDialog extends EntityDialog<Match> {

  private JPanel mainPanel;

  private JButton buttonOK;

  private JButton buttonCancel;

  /** Поле даты и времени. */
  private DateTimePicker timestampField;

  /** Поле описания. */
  private JTextField opponentNameField;

  /** Поле голов команды администратора. */
  private JTextField ownTeamGoalsField;

  /** Поле голов команды соперника. */
  private JTextField opponentTeamGoalsField;

  public MatchDialog(
      JFrame parent, Consumer<Match> saveFunction, Runnable refreshGUIFunction, Match entity) {
    super(parent, saveFunction, refreshGUIFunction, entity);
    init(mainPanel, buttonOK, buttonCancel);
    pack();
    setVisible(true);
  }

  @Override
  protected void fillFields(Match entity) {
    timestampField.setDateTimeStrict(entity.getTimestamp().toLocalDateTime());
    opponentNameField.setText(entity.getOpponentName());
    ownTeamGoalsField.setText(
        entity.getOwnTeamGoals() != null ? entity.getOwnTeamGoals().toString() : "");
    opponentTeamGoalsField.setText(
        entity.getOpponentTeamGoals() != null ? entity.getOpponentTeamGoals().toString() : "");
  }

  @Override
  protected boolean isFieldsValid() throws InvalidFieldException {
    List<String> invalidFields = new ArrayList<>();

    if (timestampField.getDateTimeStrict() == null) {
      invalidFields.add("дата и время");
    }
    if (!StringUtils.hasText(opponentNameField.getText())) {
      invalidFields.add("название команды соперника");
    }
    if (!allGoalsFieldsAreFilled() && StringUtils.hasText(ownTeamGoalsField.getText())) {
      invalidFields.add("голы команды соперника");
    }
    if (!allGoalsFieldsAreFilled() && StringUtils.hasText(opponentTeamGoalsField.getText())) {
      invalidFields.add("голы команды администратора");
    }

    if (allGoalsFieldsAreFilled()) {
      try {
        Integer.parseInt(ownTeamGoalsField.getText());
      } catch (NumberFormatException e) {
        invalidFields.add("голы команды администратора");
      }

      try {
        Integer.parseInt(opponentTeamGoalsField.getText());
      } catch (NumberFormatException e) {
        invalidFields.add("голы команды соперника");
      }
    }

    if (!invalidFields.isEmpty()) {
      throw new InvalidFieldException(invalidFields);
    }

    return true;
  }

  private boolean allGoalsFieldsAreFilled() {
    return StringUtils.hasText(ownTeamGoalsField.getText())
        && StringUtils.hasText(opponentTeamGoalsField.getText());
  }

  @Override
  protected Match createNewEntity() {
    return new Match();
  }

  @Override
  protected void fillEntityFromFields(Match entity) {
    entity.setTimestamp(Timestamp.valueOf(timestampField.getDateTimeStrict()));
    entity.setOpponentName(opponentNameField.getText());

    if (allGoalsFieldsAreFilled()) {
      entity.setOwnTeamGoals(Integer.parseInt(ownTeamGoalsField.getText()));
      entity.setOpponentTeamGoals(Integer.parseInt(opponentTeamGoalsField.getText()));
    } else if (!StringUtils.hasText(ownTeamGoalsField.getText())
        && !StringUtils.hasText(opponentTeamGoalsField.getText())) {
      entity.setOwnTeamGoals(null);
      entity.setOpponentTeamGoals(null);
    }
  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /** Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    mainPanel = new JPanel();
    mainPanel.setLayout(new GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), -1, -1));
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
    mainPanel.add(panel1, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    buttonOK = new JButton();
    buttonOK.setText("ОК");
    panel1.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    buttonCancel = new JButton();
    buttonCancel.setText("Отменить");
    panel1.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final JLabel label1 = new JLabel();
    label1.setText("Дата и время");
    mainPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final JLabel label2 = new JLabel();
    label2.setText("Название команды соперника");
    mainPanel.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    opponentNameField = new JTextField();
    mainPanel.add(opponentNameField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    final JLabel label3 = new JLabel();
    label3.setText("Голы команды администратора");
    mainPanel.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final JLabel label4 = new JLabel();
    label4.setText("Голы команды соперника");
    mainPanel.add(label4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    ownTeamGoalsField = new JTextField();
    mainPanel.add(ownTeamGoalsField, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    opponentTeamGoalsField = new JTextField();
    mainPanel.add(opponentTeamGoalsField, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    timestampField = new DateTimePicker();
    mainPanel.add(timestampField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
  }

  /** @noinspection ALL */
  public JComponent $$$getRootComponent$$$() {
    return mainPanel;
  }

}
